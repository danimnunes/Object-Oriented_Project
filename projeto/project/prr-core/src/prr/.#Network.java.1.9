package prr;

import java.io.Serializable;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;
import prr.exceptions.UnrecognizedEntryException;
//import prr.exceptions.DuplicateClientKeyException;
import prr.Clients.Client;
import prr.terminals.Terminal;
import java.util.Collection;
import java.util.Map;
import java.util.TreeMap;


// FIXME add more import if needed (cannot import from pt.tecnico or prr.app)

/**
 * Class Store implements a store.
 */
public class Network implements Serializable {

	/** Serial number for serialization. */
	private static final long serialVersionUID = 202208091753L;

	/*Control saves. If there are no changes, there is no save. */
	private boolean _changed = false;

	/*Each client key as his client associated. */
	private Map<String, Client> _Clients = new TreeMap<String, Client>();

	/*Each terminal has is ID associated. */
	private Map<String, Terminal> _Terminals = new TreeMap<String, Terminal>();

        // FIXME define attributes
        // FIXME define contructor(s)
        // FIXME define methods

	/**
	 * Read text input file and create corresponding domain entities.
	 * 
	 * @param filename name of the text input file
         * @throws UnrecognizedEntryException if some entry is not correct
	 * @throws IOException if there is an IO erro while processing the text file
	 */

	void importFile(String FileName) {
		try {
			String[] splited_line;
			BufferedReader reader = new BufferedReader(new FileReader(FileName));
			String line;
			while((line = reader.readLine()) != null) {
				splited_line = line.split("\\|");
				RegisterObject(splited_line);
			}
			reader.close();
		}
		catch(IOException e) {
			e.printStackTrace();
		}
    }


	public void setChanged(boolean changed) {
		_changed = changed;
	}

	public boolean hasChanged() {
		return _changed;
	}


	public void RegisterObject(String[] splited_line) /*throws UnknownDataException*/ { //throws exceções
		switch (splited_line[0]) {
			case "CLIENT" -> RegisterClient(splited_line);
			case "BASIC", "FANCY" -> RegisterTerminal(splited_line);
			//case "FRIEND" -> AddFriend(splited_line);
			//default -> throw new UnknownDataException(splited_line[0]); // Pôr?
		}
	}

/****************************** Clients Related ******************************/
	public void RegisterClient(String[] splited_line) {
		Client client = new Client(splited_line[1], splited_line[2], splited_line[3]);

		/*Add the new client to the others. */
		AddClient(splited_line[1], client);
	}


	public void AddClient(String ClientKey, Client client) {
		_Clients.put(ClientKey, client);
		setChanged(true);
		/*Verify if client's key already exists.*/
		/*try {
			if (_Clients.containsKey(ClientKey))
				throw new DuplicateClientKeyException(ClientKey);
			If the key is new, add the client.
			else
				_Clients.put(ClientKey, client);
		}
		catch (DuplicateClientKeyException e) {
			e.printStackTrace();
		}*/
	}

	/*Check if the client's key already exists */
	public boolean searchClient(String key) {
		return _Clients.containsKey(key);
	}

	public Client getClient(String key) {
		return _Clients.get(key);
	}

	public Collection getAllClients() {
		return _Clients.values();
	}	

/*****************************************************************************/


/****************************** Terminal Related *****************************/
	public void RegisterTerminal(String[] splited_line) {
		Terminal terminal = new Terminal (splited_line[0], splited_line[1],
										splited_line[2], splited_line[3]);
		AddTerminal(splited_line[1], terminal);
	}

	public void AddTerminal(String TerminalID, Terminal terminal) {
		_Terminals.put(TerminalID, terminal);
		setChanged(true);
	}

	public boolean searchTerminal(String TerminalID) {
		return _Terminals.containsKey(TerminalID);
	}

	public Terminal getTerminal(String TerminalKey) {
		return _Terminals.get(TerminalKey);
	}

	public Collection getAllTerminals() {
		return _Terminals.values();
	}
/*****************************************************************************/
}